var TITLE = "Chisel"
var VERSION = "v0.2"
var AUTHOR = "fruloo"

// Instructions
// 1) Enter Deadwood Waterfall.
// 2) Select the desired glyph from the right panel.
// 3) Use mouse or touchscreen to draw on the center panel.

// Changelog
// v0.2 (2023-11-05)
//    Added right mouse button drawing. (PC only)
//    Improved UI design.
//    Fixed layout issues for certain screen sizes.
// v0.1 (2023-11-05)
//    Initial release.

var LOGO = ascii
##/7
#//#
´¯`-
asciiend

// UI Factory

func MakePanel(parent, x, y, w, h, color, style)
  var panel = ui.AddPanel()
  panel.x = x
  panel.y = y
  panel.w = w
  panel.h = h 
  panel.anchor = top_left
  panel.dock = top_left
  ?color ! null
    panel.color = color
  ?style ! null
    panel.style = style
  ?parent ! null
    parent.Add(panel)
  return panel

func MakeButton(x, y, w, h, text, style, onPressedFn)
  var btn = ui.AddButton()
  btn.x = x
  btn.y = y
  btn.w = w
  btn.h = h
  btn.anchor = top_left
  btn.dock = top_left
  ?text ! null
    btn.text = text
  :
    btn.text = ""
  ?style ! null
    btn.style = style
  ?onPressedFn ! null
    btn.SetPressed(onPressedFn)
  btn.visible = inherit
  return btn

func MakeSprite(x, y, w, h, color, spriteStr)
  var sprite = ui.AddAnim(spriteStr)
  sprite.x = x
  sprite.y = y
  sprite.w = w
  sprite.h = h
  sprite.anchor = top_left
  sprite.dock = top_left
  sprite.color = color
  sprite.visible = inherit
  return sprite

func MakeText(x, y, w, h, align, content)
  var text = ui.AddText()
  text.x = x
  text.y = y
  text.w = w
  text.h = h
  text.anchor = top_left
  text.dock = top_left
  ?align ! null
    text.align = align
  ?content ! null
    text.text = content
  return text

// Assets

var StyleInvisible = ui.AddStyle("
^###
^###
^###")

var AsciiPalette = ascii
☆☺ʘ❤♦♣♠•◘⏹◙♂♀♪♫☼
▶◀À⚿œ§≠¿↑↓→←¯¡▲▼
 !＂#$%&'()*+,-./
0123456789:;<=>?
@ABCDEFGHIJKLMNO
PQRSTUVWXYZ[\]^_
`abcdefghijklmno
pqrstuvwxyz{|}~´
ÇüéâäàåçêëèïîìÄÅ
ÉæÆôöòûùýÖÜ€£￥₩Á
áíóúñÑãõζηξλψέ«»
░▒▓│┤╡╢╖╕╣║╗╝╜╛┐
└┴┬├─┼╞╟╚╔╩╦╠═╬╧
╨╤╥╙╘╒╓╫╪┘┌█▄▀ρι
αβγπΣσμτΦΘΩδ∞φεω
≡±≥≤⌐¬÷≈°…·†☤∆❄┊
asciiend

// Main

var initialized = false

var basePanel = null

var canvasPanel = null
var canvasPanelTitle = null
var canvasButton = null
var canvas = null

var palettePanel = null
var palettePanelTitle = null
var palleteTable = null
var palleteButton = null

var toolsPanel = null
var toolsPanelTitle = null
var toolsGlyphPanelL = null
var toolsGlyphGlyphL = null
var toolsGlyphPanelR = null
var toolsGlyphGlyphR = null
var toolsSwapGlyphLR = null
var toolSwap = null
var toolClear = null

var titleText = null
var authorText = null
var logoSprite = null

var isDrawingL = false
var lastDrawTimeL = null
var currentGlyphL = "o"
var isDrawingR = false
var lastDrawTimeR = null
var currentGlyphR = " "

func Init()
  ?initialized
    return
  basePanel = MakePanel(null, 5, 3 - (27 - screen.h)/2, screen.w - 10, 21, null, StyleInvisible)

  canvasPanel = MakePanel(basePanel, 18, 0, basePanel.w - 36, basePanel.h, null, null)
  canvasPanel.color = "#565656"
  canvasPanelTitle = MakeText(2, 0, 12, 1, "left", "Canvas " + canvasPanel.w + "x" + canvasPanel.h)
  canvasPanelTitle.color = "#565656"
  canvasPanel.Add(canvasPanelTitle)
  canvasButton = MakeButton(1, 1, canvasPanel.w - 2, canvasPanel.h - 2, null, StyleInvisible, null)
  canvasButton.SetDown(StartDrawingL)
  canvasButton.SetUp(EndDrawingL)
  canvasButton.hcolor = "#000000"
  canvasButton.sound = null
  canvasPanel.Add(canvasButton)
  canvas = ui.AddCanvas()
  canvas.x = 1
  canvas.y = 1
  canvas.w = canvasPanel.w - 2
  canvas.h = canvasPanel.h - 2
  canvas.dock = top_left
  canvas.anchor = top_left
  canvas.SetFG("#ffffff")
  canvas.SetBG("#000000")
  canvasPanel.Add(canvas)

  palettePanel = MakePanel(basePanel, 0, 0, 18, basePanel.h, null, null)
  palettePanel.color = "#565656"
  palettePanelTitle = MakeText(2, 0, 12, 1, "left", "Palette")
  palettePanelTitle.color = "#565656"
  palettePanel.Add(palettePanelTitle)
  palleteButton = MakeButton(1, 1, 16, 16, null, StyleInvisible, CheckPaletteSelectL)
  palleteButton.hcolor = "#000000"
  palettePanel.Add(palleteButton)
  palleteTable = MakeSprite(1, 1, 16, 16, "#ffffff", AsciiPalette)
  palettePanel.Add(palleteTable)

  toolsPanel = MakePanel(basePanel, basePanel.w - 18, 0, 18, basePanel.h, null, null)
  toolsPanel.color = "#565656"
  toolsPanelTitle = MakeText(2, 0, 12, 1, "left", "Tools")
  toolsPanelTitle.color = "#565656"
  toolsPanel.Add(toolsPanelTitle)
  toolsGlyphPanelL = MakePanel(toolsPanel, 1, 1, 5, 3, null, null)
  toolsGlyphGlyphL = MakeText(2, 1, 1, 1, "center", currentGlyphL)
  toolsGlyphPanelL.Add(toolsGlyphGlyphL)

  toolsGlyphPanelR = MakePanel(toolsPanel, 6, 1, 5, 3, null, null)
  toolsGlyphGlyphR = MakeText(2, 1, 1, 1, "center", currentGlyphR)
  toolsGlyphPanelR.Add(toolsGlyphGlyphR)

  toolSwap = MakeButton(11, 1, 6, 3, "Swap", null, SwapLR)
  toolsPanel.Add(toolSwap)
  toolClear = MakeButton(1, 13, 16, 3, "Clear Canvas", null, ClearCanvas)
  toolsPanel.Add(toolClear)

  titleText = MakeText(2, basePanel.h - 4, 16, 1, "left", TITLE + " " + VERSION)
  toolsPanel.Add(titleText)
  authorText = MakeText(2, basePanel.h - 3, 16, 1, "left", "by " + AUTHOR)
  toolsPanel.Add(authorText)
  logoSprite = MakeSprite(12, basePanel.h - 4, 4, 3, "#ffffff", LOGO)
  toolsPanel.Add(logoSprite)

  // Enable right mouse drawing on PC
  ?sys.isPC
    key.Bind("BumpL", "Z", "Mouse1")

  initialized = true

func PointInRect(px, py, rx, ry, rw, rh)
  return px >= rx & px < (rx + rw) & py >= ry & py < (ry + rh)
  
func CheckPaletteSelectL()
  var dx = input.x - palleteTable.absoluteX
  var dy = input.y - palleteTable.absoluteY

  ?PointInRect(dx, dy, 0, 0, palleteTable.w, palleteTable.h)
    currentGlyphL = draw.GetSymbol(input.x, input.y)
    toolsGlyphGlyphL.text = currentGlyphL

func StartDrawingL()
  var dx = input.x - canvas.absoluteX
  var dy = input.y - canvas.absoluteY
  ?PointInRect(dx, dy, 0, 0, canvas.w, canvas.h)
    isDrawingL = true

func EndDrawingL()
  isDrawingL = false

func CanvasDrawL()
  var dx = input.x - canvas.absoluteX
  var dy = input.y - canvas.absoluteY

  ?PointInRect(dx, dy, 0, 0, canvas.w, canvas.h)
    canvas.Set(dx, dy, currentGlyphL)
    
  lastDrawTimeL = time.msbn

func CheckPaletteSelectR()
  var dx = input.x - palleteTable.absoluteX
  var dy = input.y - palleteTable.absoluteY

  ?PointInRect(dx, dy, 0, 0, palleteTable.w, palleteTable.h)
    currentGlyphR = draw.GetSymbol(input.x, input.y)
    toolsGlyphGlyphR.text = currentGlyphR

func StartDrawingR()
  var dx = input.x - canvas.absoluteX
  var dy = input.y - canvas.absoluteY
  ?PointInRect(dx, dy, 0, 0, canvas.w, canvas.h)
    isDrawingR = true

func EndDrawingR()
  isDrawingR = false

func CanvasDrawR()
  var dx = input.x - canvas.absoluteX
  var dy = input.y - canvas.absoluteY

  ?PointInRect(dx, dy, 0, 0, canvas.w, canvas.h)
    canvas.Set(dx, dy, currentGlyphR)
    
  lastDrawTimeR = time.msbn

func SwapLR()
  var temp = currentGlyphL
  currentGlyphL = currentGlyphR
  currentGlyphR = temp
  toolsGlyphGlyphL.text = currentGlyphL
  toolsGlyphGlyphR.text = currentGlyphR

func ClearCanvas()
  canvas.Set(" ")

func Run()
  ?!initialized
    Init()

  ?lastDrawTimeL ! null & (time.msbn).Sub(lastDrawTimeL).Ge(90)
    isDrawingL = false

  ?isDrawingL
    CanvasDrawL()
  :
    lastDrawTimeL = null

  ?sys.isPC
    ?key = bumpLBegin
      CheckPaletteSelectR()
      StartDrawingR()
    ?key = bumpLEnd
      EndDrawingR()

    ?lastDrawTimeR ! null & (time.msbn).Sub(lastDrawTimeR).Ge(90)
      isDrawingR = false

    ?isDrawingR
      CanvasDrawR()
    :
      lastDrawTimeR = null

  // Testing layout
  // >`1,@screen.h - 1@,Screen @screen.w@x@screen.h@

?string.Equals(loc.id, waterfall)
  Run()